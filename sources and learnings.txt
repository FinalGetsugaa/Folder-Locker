Desktop.ini    :   This file is present in each folder which determines the way a folder is displayed.

How it works:
        Edit the desktop.ini file in such a way that it contains the following text:
	"[.shellClassInfo]
	 CLSID = {63E23168-BFF7-4E87-A246-EF024425E4EC}"
	new line is important.
	the first line is format we have to write before changing how a folder is displayed in windows.
	Like changing icons and stuffs.
	CLSID (class ID) : is a globally unique identifier or key that identifies COM class object. It is
	a 128 bit number within curly braces. It is generally used in windows server. 
	What it actually does  -  Various clsid is present for various windows class objects like 
	my computer,  control panel,etc. So we edit the clsid of that folder to let it behave like a 
	windows class folder or commonly known as system folder and this adds another layer of security
	in hiding our folder.


system() : runs any command inputted in it in string fromat.


fstream.h  : Here used for accessing the input and output stream for a file in c++.
tutorialspoint.com "C++ files and streams" for include header files


for windows.h  :
1- SetConsoleTitle() : sets the title of command prompt window opened.
2- HANDLE : Here handle is a pointer to a resource in kernel space.
   "GetStdHandle(STD_OUTPUT_HANDLE)" - this function returns handle for outputting to the console and has 
   various attrib for text in the console. Here we are using it for color outputting.
3- WinExec(): here to execute attrib.exe to our destination folder we have used this. Instead of this
   we can also use system() function it will work the same.


=====================================================================================================================
In lockFolder():

folder.open("C:\\windows\\db.dat", ios::app);
folder << "Folder Locked: " << tempfolder << endl;
folder.close();
    
In unlockFolder():

    folder.open("C:\\windows\\db.dat", ios::app);
    folder << "! Folder Unlocked: " << tempfolder << endl;
    folder.close();